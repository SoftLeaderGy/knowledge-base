import{_ as a,c as e,o as t,a4 as i}from"./chunks/framework.IpiIUH1b.js";const o="/assets/1690162281589-9cfdf2a1-5873-48cd-9037-7676ed2a6f6e.lAdE9nWn.png",r="/assets/1690162326170-42ceef53-a133-4428-b08a-6373e89492a5.BlXjJ9wU.png",s="/assets/1690162480459-8a55fda6-4db0-4e52-8f9a-e2f385295c69.D0PU5FEX.png",c="/assets/1690162528476-55e6e2db-c308-4227-960b-1be095a2c2d6.CGYRDj_t.png",n="/assets/1690162590220-2fa05207-c299-4304-8b43-4aa38ba0b97c.BUV10FSi.png",l="/assets/1690162626395-4e7f20a2-414f-4490-a8c8-19e580fd320b.lRlmSIry.png",p="/assets/1690162867192-68818820-d3af-4429-948a-a44d51c43199.C-uaDver.png",h="/assets/1690164887946-36ea3fed-912a-4f91-80a8-b37ed525d5b9.CyPyRiWi.png",d="/assets/1690165351118-cb1c1d43-3b9c-4506-bc1b-8f94df26f217.CrihGzv1.png",g="/assets/1690165464434-75ce8fe4-2dc1-44d2-89eb-2c2d8854b487.B3CRKPS5.png",b="/assets/1690165485009-6358b3ac-e1e6-41cd-8deb-88ba590dc4db.-NuWTGgc.png",m="/assets/1690165502201-8d00361d-ced3-4ef4-af2b-bf204042c20b.DKpAXsdd.png",u="/assets/1690165658750-09f0b9d2-616f-4430-8645-24c839a8a371.Demc9Tpm.png",j=JSON.parse('{"title":"什么是图床","description":"","frontmatter":{},"headers":[],"relativePath":"nav/乱七八糟教程/Github搭建图床/Github搭建图床.md","filePath":"nav/乱七八糟教程/Github搭建图床/Github搭建图床.md","lastUpdated":null}'),_={name:"nav/乱七八糟教程/Github搭建图床/Github搭建图床.md"},f=i('<h1 id="什么是图床" tabindex="-1">什么是图床 <a class="header-anchor" href="#什么是图床" aria-label="Permalink to &quot;什么是图床&quot;">​</a></h1><p>所谓图床，就是存储图片的服务器。 我们写在线文档的时候，如果我们把图片仅仅存放在本地，那么别人来去访问这个文档的时候，图片就看不到了。 那么，为了避免这样一种情况，使得别人在访问我的文档的时候，图片不会丢失，那么我就需要将我的图片存放到别人也可以访问的服务器上。通常，我们就称这样的服务器为图床。</p><blockquote><p>因为是github搭建图床，访问github忙的情况，就得自行解决了。</p></blockquote><h1 id="github创建图床服务器" tabindex="-1">github创建图床服务器 <a class="header-anchor" href="#github创建图床服务器" aria-label="Permalink to &quot;github创建图床服务器&quot;">​</a></h1><h2 id="创建仓库" tabindex="-1">创建仓库 <a class="header-anchor" href="#创建仓库" aria-label="Permalink to &quot;创建仓库&quot;">​</a></h2><p><img src="'+o+'" alt="image.png"><img src="'+r+'" alt="image.png"></p><h2 id="生成token令牌" tabindex="-1">生成token令牌 <a class="header-anchor" href="#生成token令牌" aria-label="Permalink to &quot;生成token令牌&quot;">​</a></h2><p><img src="'+s+'" alt="image.png"><img src="'+c+'" alt="image.png"><img src="'+n+'" alt="image.png"> 紧接着把这个repo全部选上： 然后拉到底部，选择创建就行了。 <img src="'+l+'" alt="image.png"> 这个Token是你的服务器（即你的账户下的github服务器）的令牌，暂时和你的仓库还没有什么关系。 然后创建完以后，就会出现一串Token字符串，你把这个Token数字复制、保存下来(可以新创一个txt文件，保存到里面)。因为你可能一会儿就见不到了。</p><h2 id="使用picgo来实现图片上传" tabindex="-1">使用PicGo来实现图片上传 <a class="header-anchor" href="#使用picgo来实现图片上传" aria-label="Permalink to &quot;使用PicGo来实现图片上传&quot;">​</a></h2><p>首先要说一下，PicGo是一款软件。我们就是用它来实现图片上传的。所以说，它是核心软件。</p><h3 id="下载picgo" tabindex="-1">下载PicGo <a class="header-anchor" href="#下载picgo" aria-label="Permalink to &quot;下载PicGo&quot;">​</a></h3><blockquote><p>下载地址：<a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/v2.3.1/" target="_blank" rel="noreferrer">https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/v2.3.1/</a></p></blockquote><h3 id="picgo配置" tabindex="-1">PicGo配置 <a class="header-anchor" href="#picgo配置" aria-label="Permalink to &quot;PicGo配置&quot;">​</a></h3><ul><li>1、选择【图床设置】-&gt;【Github】然后进行配置：</li></ul><p><img src="'+p+'" alt="image.png"></p><ul><li>具体配置方法： <ul><li>设定仓库名，实际上就是用户名+仓库名。这个仓库就是你刚刚在2.1中新建的仓库。具体来说，就是这个东西：</li><li>设定分支名：就是你的仓库在哪个分支里，就填哪个分支。一般有main分支，master分支等。我这里是自己新创建的一个img分支。你填自己所在的分支就好。关于分支，具体来说，可以在这里查看：</li></ul></li></ul><p><img src="'+h+'" alt="image.png"></p><ul><li>设定Token：就是刚刚在2.2中我们复制的Token字符串。将其填进去即可。</li><li>设定存储路径，一般来说，它可以是你项目仓库中的一个文件夹。我们这里就统一设置成了img/</li><li>设置自定义域名。这个是比较关键的。我们可以用一个免费的加速域名作为我们自定义域名。</li></ul><p>那么你所设置的就应当为<a href="https://cdn.jsdelivr.net/gh/" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/gh/</a> +你的账户名+你的仓库名@你的分支名。比如，我上面的就是<a href="https://cdn.jsdelivr.net/gh/jianxiangwudi/MyPic@img" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img</a> 按照需要改成你自己的。</p><blockquote><p>需要注意的是，这里一定要设置成@，而不要设置成 / 我也是花了很长很长时间才搞明白。。。设置成 / 以后，你会惊奇地发现，它在你的typora里面显示不了。。。配置完以后，就可以点击确定，然后也可以将其设置为默认图床。</p></blockquote><h3 id="用picgo上传图片" tabindex="-1">用PicGo上传图片 <a class="header-anchor" href="#用picgo上传图片" aria-label="Permalink to &quot;用PicGo上传图片&quot;">​</a></h3><p>直接拖拽就可以了。 <img src="'+d+'" alt="image.png"> 然后，我们能够在相册中看到我们已经上传的图片，可以查看、复制已经上传的图片的URL，同时也可以将上传的图片删除。 <img src="'+g+'" alt="image.png"> 然后，我们也可以对PicGo进行一系列的设置。 比如启用时间戳，这样在多次上传同一张图片的时候就不会有问题了。 <img src="'+b+'" alt="image.png"> 比如可以开启日志功能(默认开启)，这样我们上传失败可以通过查看日志来具体查看是什么原因。 <img src="'+m+'" alt="image.png"></p><h2 id="设置typora实现自动上传" tabindex="-1">设置Typora实现自动上传 <a class="header-anchor" href="#设置typora实现自动上传" aria-label="Permalink to &quot;设置Typora实现自动上传&quot;">​</a></h2><p>这一点有个前提，就是你有那种代理呦hhh，否则，你可能会因为超时，而无法实现自动上传，只能手动将图片移到PicGo里面，然后再将URL复制到Typora里面啦~~</p><ol><li>首先，点击【文件】-&gt;【偏好设置】</li><li>再次，选择【图像】。</li><li>然后按照下图所示，插入图片时选择上传图片。然后在上传服务内选择PicGo，并选择PicGo.exe的路径。</li><li>这里的可以这样来去配置：</li></ol><p><img src="'+u+'" alt="image.png"></p><blockquote><p>然后这样的话，你将你的截图直接粘贴到Typora里面，你的Typora会将链接直接通过PicGo上传到你Github服务器的仓库中。然后别人和你就都可以通过访问这个链接来实现图片共享啦。这样，你在发送你的文件的时候，图片就不会丢失了。</p></blockquote>',27),P=[f];function k(G,q,T,x,v,y){return t(),e("div",null,P)}const C=a(_,[["render",k]]);export{j as __pageData,C as default};
