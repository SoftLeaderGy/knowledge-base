import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.IpiIUH1b.js";const l="/assets/1686709081210-11703652-d441-4991-9a52-e9bf32a45161.DierUhjo.png",p="/assets/1686647902677-0026439c-9861-4a3d-82a0-a86bd7d789d5.BllQ7yC-.png",t="/assets/1686648283472-4db9e00b-b602-44fa-874a-390ac4b00a02.BU0brbJb.png",h="/assets/1686648368211-43ad04a6-d449-46e5-b37a-0c4b08dd30c3.DWxVwXTo.png",e="/assets/1686705576282-ee67da58-6685-4743-994c-6e4f4828de8f.CdNKr2B2.png",k="/assets/1686706714174-26685739-0035-45b3-89e3-c10c8a876798.B65faRzZ.png",r="/assets/1686707501153-e7b09d24-631d-48c3-addd-f99f1e666325.XvQ1j5su.png",E="/assets/1686707971524-686309f9-9a99-49ba-bb48-d677f2455e50.Bqy76zhm.png",o="/assets/1686708253518-5fe773a5-7116-4237-b764-642b954db063.DtA14PCu.png",d="/assets/1686708221396-66431c35-8d5e-4d25-b8c7-234f1d7d7a9e.9c8FAXN5.png",g="/assets/1686708485814-7c95b689-36db-4f05-ac0f-f3e89325e910.Cgr5osSU.png",c="/assets/1686708375398-24d30830-73b3-4d9f-bcc5-e41a5e361b33.Dd9FSkUp.png",j=JSON.parse('{"title":"一、搭建过程","description":"","frontmatter":{},"headers":[],"relativePath":"sidebar/开源组件构建集成/xxl-job搭建/xxl-job搭建.md","filePath":"sidebar/开源组件构建集成/xxl-job搭建/xxl-job搭建.md","lastUpdated":null}'),y={name:"sidebar/开源组件构建集成/xxl-job搭建/xxl-job搭建.md"},u=n('<h1 id="一、搭建过程" tabindex="-1">一、搭建过程 <a class="header-anchor" href="#一、搭建过程" aria-label="Permalink to &quot;一、搭建过程&quot;">​</a></h1><h2 id="_1-1、官网" tabindex="-1">1.1、官网 <a class="header-anchor" href="#_1-1、官网" aria-label="Permalink to &quot;1.1、官网&quot;">​</a></h2><p><a href="https://www.xuxueli.com/xxl-job/" target="_blank" rel="noreferrer">分布式任务调度平台XXL-JOB</a></p><h2 id="_1-2、代码结构" tabindex="-1">1.2、代码结构 <a class="header-anchor" href="#_1-2、代码结构" aria-label="Permalink to &quot;1.2、代码结构&quot;">​</a></h2><p><img src="'+l+'" alt="image.png"></p><h2 id="_1-3、初始化数据库" tabindex="-1">1.3、初始化数据库 <a class="header-anchor" href="#_1-3、初始化数据库" aria-label="Permalink to &quot;1.3、初始化数据库&quot;">​</a></h2><ul><li>初始化脚本在上面源码目录的 /doc/db/tables_xxl_job.sql ，将此脚本在MySQL数据库中执行一遍。</li><li>执行完毕，会在MySQL数据库中生成如下 8 张表：</li></ul><p><img src="'+p+`" alt="image.png"></p><h2 id="_1-4、配置调度中心-admin" tabindex="-1">1.4、配置调度中心（admin） <a class="header-anchor" href="#_1-4、配置调度中心-admin" aria-label="Permalink to &quot;1.4、配置调度中心（admin）&quot;">​</a></h2><p>调度中心就是源码中的 xxl-job-admin 工程，我们需要将其配置成自己需要的调度中心，通过该工程我们能够以图形化的方式统一管理任务调度平台上调度任务，负责触发调度执行</p><h3 id="_1-4-1、修改调度中心配置文件" tabindex="-1">1.4.1、修改调度中心配置文件 <a class="header-anchor" href="#_1-4-1、修改调度中心配置文件" aria-label="Permalink to &quot;1.4.1、修改调度中心配置文件&quot;">​</a></h3><p>文件地址：/xxl-job/xxl-job-admin/src/main/resources/xxl-job-admin.properties 配置文件说明：</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 1、调度中心项目的端口号以及访问路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server.port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=8080</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server.context-path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/xxl-job-admin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 2、配置静态文件的前缀</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mvc.static-path-pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/static/**</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.resources.static-locations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=classpath:/static/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 3、配置模板文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.freemarker.templateLoaderPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=classpath:/templates/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.freemarker.suffix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=.ftl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.freemarker.charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=UTF-8</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.freemarker.request-context-attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=request</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.freemarker.settings.number_format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=0.</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">##########</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 4、配置mybatis的mapper文件地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mybatis.mapper-locations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=classpath:/mybatis-mapper/*Mapper.xml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 5、配置数据库的地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=jdbc:mysql://127.0.0.1:3306/xxl_job?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">useUnicode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">characterEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=UTF-8&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">autoReconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">serverTimezone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=Asia/Shanghai</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=root</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=root123456</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.driver-class-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=com.mysql.cj.jdbc.Driver</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=org.apache.tomcat.jdbc.pool.DataSource</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.tomcat.max-wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=10000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.tomcat.max-active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=30</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.tomcat.test-on-borrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.tomcat.validation-query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=SELECT 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.tomcat.validation-interval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=30000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 6、配置报警邮箱</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=smtp.qq.com</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=25</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=xxx@qq.com</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=xxx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.properties.mail.smtp.auth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.properties.mail.smtp.starttls.enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.properties.mail.smtp.starttls.required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 7、调度中心通讯TOKEN，非空时启用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.accessToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=default_token</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 8、调度中心国际化设置，默认为中文版本，值设置为“en”时切换为英文版本</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.i18n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span></span></code></pre></div><blockquote><p>注意：基本上上面的配置文件我们需要修改的只有第 5 点，修改数据库的地址，这要与我们前面初始化的数据库名称径，用户名密码保持一致； 第二个就是修改第 6 点，报警邮箱，因为该工程任务失败后有失败告警功能，可以通过邮件来提醒，如果我们需要此功能，可以配置一下。</p></blockquote><h3 id="_1-4-2、部署调度中心" tabindex="-1">1.4.2、部署调度中心 <a class="header-anchor" href="#_1-4-2、部署调度中心" aria-label="Permalink to &quot;1.4.2、部署调度中心&quot;">​</a></h3><p>该工程是一个springboot项目，我们只需要在IDEA中执行 XxlJobAdminApplication 类即可运行该工程： <img src="`+t+'" alt="image.png"></p><h3 id="_1-4-3、访问调度中心管理界面" tabindex="-1">1.4.3、访问调度中心管理界面 <a class="header-anchor" href="#_1-4-3、访问调度中心管理界面" aria-label="Permalink to &quot;1.4.3、访问调度中心管理界面&quot;">​</a></h3><p>在浏览器输入 <code>http://localhost:8080/xxl-job-admin</code> 然后输入用户名和密码（默认账密为admin/123456），即可看到如下管理界面。 <img src="'+h+`" alt="image.png"></p><h2 id="_1-5、自建执行器项目" tabindex="-1">1.5、自建执行器项目 <a class="header-anchor" href="#_1-5、自建执行器项目" aria-label="Permalink to &quot;1.5、自建执行器项目&quot;">​</a></h2><p>以创建一个 springboot 版本的执行器为例</p><h3 id="_1-5-1、添加maven依赖" tabindex="-1">1.5.1、添加maven依赖 <a class="header-anchor" href="#_1-5-1、添加maven依赖" aria-label="Permalink to &quot;1.5.1、添加maven依赖&quot;">​</a></h3><ul><li>在创建好的springboot 项目的pom.xml 文件中添加如下依赖：</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- xxl-rpc-core --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.xuxueli&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;xxl-job-core&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2.4.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_1-5-2、配置执行器" tabindex="-1">1.5.2、配置执行器 <a class="header-anchor" href="#_1-5-2、配置执行器" aria-label="Permalink to &quot;1.5.2、配置执行器&quot;">​</a></h3><p>在创建好的springboot 项目的配置文件 xxl-job.properties 添加如下配置：</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### xxl-job admin address list, such as &quot;http://address&quot; or &quot;http://address01,http://address02&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.admin.addresses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=http://127.0.0.1:8080/xxl-job-admin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### xxl-job, access token</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.accessToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=default_token</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### xxl-job executor appname</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#xxl.job.executor.appname=xxl-job-executor-sample-cluster</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.executor.appname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=xxl-job-executor-sample</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### xxl-job executor registry-address: default use address to registry , otherwise use ip:port if address is null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.executor.address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### xxl-job executor server-info</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.executor.ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.executor.port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=9999</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### xxl-job executor log-path</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.executor.logpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=./xxl-job/jobhandler</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### xxl-job executor log-retention-days</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.executor.logretentiondays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=30</span></span></code></pre></div><blockquote><p>注意：</p><ol><li>配置执行器的名称、IP地址、端口号，后面如果配置多个执行器时，要<strong>防止端口冲突</strong>。再就是<strong>执行器的名称</strong>，我们后面会到上一步的调度中心管理界面<strong>进行对应配置</strong>。</li></ol></blockquote><h3 id="_1-5-3、创建xxljobconfig配置类" tabindex="-1">1.5.3、创建XxlJobConfig配置类 <a class="header-anchor" href="#_1-5-3、创建xxljobconfig配置类" aria-label="Permalink to &quot;1.5.3、创建XxlJobConfig配置类&quot;">​</a></h3><p>在项目中创建 XxlJobConfig并使用自定义的配置文件</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.xxl.job.core.executor.impl.XxlJobSpringExecutor;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.slf4j.Logger;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.slf4j.LoggerFactory;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.beans.factory.annotation.Value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.Bean;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.Configuration;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.PropertySource;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">* @Description: xxl-job配置类</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">* @Author: Guo.Yang</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">* @Date: 2023/06/13/09:42</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PropertySource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;classpath:xxl-job.properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XxlJobConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Logger logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoggerFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(XxlJobConfig.class);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${xxl.job.admin.addresses}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String adminAddresses;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${xxl.job.executor.appname}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String appname;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${xxl.job.executor.ip}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String ip;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${xxl.job.executor.port}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${xxl.job.accessToken}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String accessToken;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${xxl.job.executor.logpath}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String logPath;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${xxl.job.executor.logretentiondays}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logRetentionDays;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XxlJobSpringExecutor </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xxlJobExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        XxlJobSpringExecutor xxlJobSpringExecutor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XxlJobSpringExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAdminAddresses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(adminAddresses);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAppname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appname);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setIp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ip);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAccessToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(accessToken);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLogPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logPath);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLogRetentionDays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logRetentionDays);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xxlJobSpringExecutor;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_1-5-4、创建任务jobhandler" tabindex="-1">1.5.4、创建任务JobHandler <a class="header-anchor" href="#_1-5-4、创建任务jobhandler" aria-label="Permalink to &quot;1.5.4、创建任务JobHandler&quot;">​</a></h3><blockquote><p>注意：这里有个注解 @XxlJob(&quot;demoJobHandler&quot;)，对于 value的值，我们会在下面进行相应配置。 在项目中创建一个Handler，用于执行我们想要执行的东西，这里我只是简单的打印一行日志：</p></blockquote><div class="info custom-block"><p class="custom-block-title">INFO</p><p>注意⚠️： 以下代码列出了三种创建job的形式</p><ol><li>简单模式的job</li><li>接受admin管理后台传入参数的job</li><li>分片广播模式的job（适用于job的集群模式，触发任务使集群每一台机器的任务都能执行）</li></ol></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.xxl.job.core.context.XxlJobHelper;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.xxl.job.core.handler.annotation.XxlJob;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lombok.extern.slf4j.Slf4j;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.stereotype.Component;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.List;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">* @Description:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">* @Author: Guo.Yang</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">* @Date: 2023/06/13/09:47</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">* XxlJob开发示例（Bean模式）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">* 开发步骤：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*      1、任务开发：在Spring Bean实例中，开发Job方法；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*      2、注解配置：为Job方法添加注解 &quot;@XxlJob(value=&quot;自定义jobhandler名称&quot;, init = &quot;JobHandler初始化方法&quot;, destroy = &quot;JobHandler销毁方法&quot;)&quot;，注解value值对应的是调度中心新建任务的JobHandler属性的值。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*      3、执行日志：需要通过 &quot;XxlJobHelper.log&quot; 打印执行日志；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*      4、任务结果：默认任务结果为 &quot;成功&quot; 状态，不需要主动设置；如有诉求，比如设置任务结果为失败，可以通过 &quot;XxlJobHelper.handleFail/handleSuccess&quot; 自主设置任务结果；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SampleXxlJob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 简单任务实例（bean模式）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">XxlJob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demoJobHandler&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> demoJobHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 需要执行的任务业务代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxl-job hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 获取admin传入的参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">XxlJob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demoJobHandlerParams&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> demoJobHandlerParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 获取后台管理传过来的参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String jobParam </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XxlJobHelper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getJobParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 需要执行的任务业务代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxl-job demoJobHandlerParams={}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,jobParam);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 2、分片广播任务</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">XxlJob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;shardingJobHandler&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shardingJobHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 分片参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shardIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XxlJobHelper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getShardIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shardTotal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XxlJobHelper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getShardTotal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        XxlJobHelper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;分片参数：当前分片序号 = {}, 总分片数 = {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, shardIndex, shardTotal);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;分片参数：当前分片序号 = {}, 总分片数 = {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, shardIndex, shardTotal);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 业务逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shardTotal; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shardIndex) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                XxlJobHelper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第 {} 片, 命中分片开始处理&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第 {} 片, 命中分片开始处理&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                XxlJobHelper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第 {} 片, 忽略&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第 {} 片, 忽略&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_1-6、在调度中心中配置执行器" tabindex="-1">1.6、在调度中心中配置执行器 <a class="header-anchor" href="#_1-6、在调度中心中配置执行器" aria-label="Permalink to &quot;1.6、在调度中心中配置执行器&quot;">​</a></h2><blockquote><p>调度中心指的就是我们之前配置的xxl-job-admin（后台管理） 调度中心前面我们已经配置好了，启动该配置中心，进入<code>http://localhost:8080/xxl-job-admin</code>界面。 初始化账密：admin/123456</p></blockquote><h3 id="_1-6-1、配置执行器" tabindex="-1">1.6.1、配置执行器 <a class="header-anchor" href="#_1-6-1、配置执行器" aria-label="Permalink to &quot;1.6.1、配置执行器&quot;">​</a></h3><ul><li>点击 执行器管理--&gt; 新增执行器--&gt;，如下如下界面，然后填充此表格，点击<strong>保存</strong>即可。</li></ul><p><img src="`+e+'" alt="image.png"></p><ul><li>执行器被成功注册</li></ul><p><img src="'+k+'" alt="image.png"> 下面是对这几个参数的介绍：</p><ul><li>a<strong>ppname</strong>：是每个执行器集群的唯一标示a<strong>ppname</strong>, 执行器会周期性以a<strong>ppname</strong>为对象进行自动注册。可通过该配置自动发现注册成功的执行器, 供任务调度时使用;</li><li><strong>名称</strong>：执行器的名称, 因为AppName限制字母数字等组成,可读性不强, 名称为了提高执行器的可读性;</li><li>排序: 执行器的排序, 系统中需要执行器的地方,如任务新增, 将会按照该排序读取可用的执行器列表;</li><li>注册方式：调度中心获取执行器地址的方式，</li><li>自动注册：执行器自动进行执行器注册，调度中心通过底层注册表可以动态发现执行器机器地址；</li><li>手动录入：人工手动录入执行器的地址信息，多地址逗号分隔，供调度中心使用；</li><li>机器地址：&quot;注册方式&quot;为&quot;手动录入&quot;时有效，支持人工维护执行器的地址信息；</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>注意：</p><ol><li>配置执行器时AppName需要与自建执行器项目中的 xxl.job.executor.appname=xxl-job-executor-sample 配置保持一致，且在自动注册中才能获取到注册节点，</li><li>在手动注册执行器节点的时候，节点地址要写全，例如<a href="http://127.0.0.1:9998/" target="_blank" rel="noreferrer">http://127.0.0.1:9998/</a>，如果是多个执行器节点的时候地址与地址之间需要用英文的逗号分隔开，例如：<a href="http://127.0.0.1:9998/,http://127.0.0.1:9999/" target="_blank" rel="noreferrer">http://127.0.0.1:9998/,http://127.0.0.1:9999/</a></li></ol></div><h3 id="_1-6-2、创建任务" tabindex="-1">1.6.2、创建任务 <a class="header-anchor" href="#_1-6-2、创建任务" aria-label="Permalink to &quot;1.6.2、创建任务&quot;">​</a></h3><p>点击 任务管理---》新增任务---》 <img src="'+r+`" alt="image.png"> 参数说明</p><ul><li>执行器：任务的绑定的执行器，任务触发调度时将会自动发现注册成功的执行器, 实现任务自动发现功能; 另一方面也可以方便的进行任务分组。每个任务必须绑定一个执行器, 可在 &quot;执行器管理&quot; 进行设置。</li><li>任务描述：任务的描述信息，便于任务管理；</li><li>路由策略：当执行器集群部署时，提供丰富的路由策略，包括； <ul><li>FIRST（第一个）：固定选择第一个机器；</li><li>LAST（最后一个）：固定选择最后一个机器；</li><li>ROUND（轮询）：；</li><li>RANDOM（随机）：随机选择在线的机器；</li><li>CONSISTENT_HASH（一致性HASH）：每个任务按照Hash算法固定选择某一台机器，且所有任务均匀散列在不同机器上。</li><li>LEAST_FREQUENTLY_USED（最不经常使用）：使用频率最低的机器优先被选举；</li><li>LEAST_RECENTLY_USED（最近最久未使用）：最久为使用的机器优先被选举；</li><li>FAILOVER（故障转移）：按照顺序依次进行心跳检测，第一个心跳检测成功的机器选定为目标执行器并发起调度；</li><li>BUSYOVER（忙碌转移）：按照顺序依次进行空闲检测，第一个空闲检测成功的机器选定为目标执行器并发起调度；</li><li>SHARDING_BROADCAST(分片广播)：广播触发对应集群中所有机器执行一次任务，同时系统自动传递分片参数；可根据分片参数开发分片任务；</li><li>Cron：触发任务执行的Cron表达式；</li></ul></li><li>运行模式： <ul><li>BEAN模式：任务以JobHandler方式维护在执行器端；需要结合 &quot;JobHandler&quot; 属性匹配执行器中任务；</li><li>GLUE模式(Java)：任务以源码方式维护在调度中心；该模式的任务实际上是一段继承自IJobHandler的Java类代码并 &quot;groovy&quot; 源码方式维护，它在执行器项目中运行，可使用@Resource/@Autowire注入执行器里中的其他服务；</li><li>GLUE模式(Shell)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 &quot;shell&quot; 脚本；</li><li>GLUE模式(Python)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 &quot;python&quot; 脚本；</li><li>GLUE模式(PHP)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 &quot;php&quot; 脚本；</li><li>GLUE模式(NodeJS)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 &quot;nodejs&quot; 脚本；</li><li>GLUE模式(PowerShell)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 &quot;PowerShell&quot; 脚本；</li><li>JobHandler：运行模式为 &quot;BEAN模式&quot; 时生效，对应执行器中新开发的JobHandler类“@JobHandler”注解自定义的value值；</li></ul></li><li>阻塞处理策略：调度过于密集执行器来不及处理时的处理策略； <ul><li>单机串行（默认）：调度请求进入单机执行器后，调度请求进入FIFO队列并以串行方式运行；</li><li>丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；</li><li>覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；</li></ul></li><li>子任务：每个任务都拥有一个唯一的任务ID(任务ID可以从任务列表获取)，当本任务执行结束并且执行成功时，将会触发子任务ID所对应的任务的一次主动调度。</li><li>任务超时时间：支持自定义任务超时时间，任务运行超时将会主动中断任务；</li><li>失败重试次数；支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；</li><li>报警邮件：任务调度失败时邮件通知的邮箱地址，支持配置多邮箱地址，配置多个邮箱地址时用逗号分隔；</li><li>负责人：任务的负责人；</li><li>执行参数：任务执行所需的参数，多个参数时用逗号分隔，任务执行时将会把多个参数转换成数组传入；可通过以下方式获取传入的参数</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取后台管理传过来的参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String jobParam </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XxlJobHelper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getJobParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h1 id="二、启动测试" tabindex="-1">二、启动测试 <a class="header-anchor" href="#二、启动测试" aria-label="Permalink to &quot;二、启动测试&quot;">​</a></h1><h2 id="_2-1、启动任务" tabindex="-1">2.1、启动任务 <a class="header-anchor" href="#_2-1、启动任务" aria-label="Permalink to &quot;2.1、启动任务&quot;">​</a></h2><ul><li>配置完执行器以及任务，我们只需要启动该任务，便可以运行了。</li></ul><p><img src="`+E+'" alt="image.png"></p><h2 id="_2-2、测试" tabindex="-1">2.2、测试 <a class="header-anchor" href="#_2-2、测试" aria-label="Permalink to &quot;2.2、测试&quot;">​</a></h2><ul><li>启动之后我们查看日志</li></ul><p><img src="'+o+'" alt="image.png"><img src="'+d+'" alt="image.png"></p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>注意：在项目中，只有通过 XxlJobLogger.log() 代码才能将日志打印到上面。 <img src="'+g+'" alt="image.png"></p></div><ul><li>项目中的控制台日志为</li></ul><p><img src="'+c+'" alt="image.png"></p><hr>',58),b=[u];function x(A,D,F,m,q,_){return a(),i("div",null,b)}const C=s(y,[["render",x]]);export{j as __pageData,C as default};
