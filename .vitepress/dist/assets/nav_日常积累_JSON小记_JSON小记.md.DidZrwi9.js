import{_ as e,E as a,c as E,m as s,a as i,J as n,w as t,a4 as r,o as g}from"./chunks/framework.IpiIUH1b.js";const d="/assets/1659929914458-6b470cca-8df7-4832-9fd3-08e72a81ce03.C3iba1Bc.png",o="/assets/1659930046047-b2255177-1331-4c43-b32d-ad328cd22fd7.DmF8t8jn.png",y="/assets/1659930115431-b86acb2b-42ae-477f-98d3-da7787c5ed3b.Cbs-Z-JY.png",R=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"nav/日常积累/JSON小记/JSON小记.md","filePath":"nav/日常积累/JSON小记/JSON小记.md","lastUpdated":null}'),c={name:"nav/日常积累/JSON小记/JSON小记.md"},u=s("strong",null,"JSON学习",-1),F=s("br",null,null,-1),q=s("strong",null,"第一章",-1),A=s("br",null,null,-1),D=s("strong",null,"fastjson",-1),b=s("br",null,null,-1),m=s("br",null,null,-1),C=s("strong",null,"pom依赖",-1),O=s("br",null,null,-1),S=s("br",null,null,-1),j=s("strong",null,"简介",-1),_=s("br",null,null,-1),B=s("br",null,null,-1),N=s("img",{src:"https://cdn.nlark.com/yuque/0/2022/png/13004873/1659929830935-2d5834e0-6c6f-4bbc-917a-a02383a94b33.png",alt:"image.png"},null,-1),J=r('<blockquote><p>下面为例子json。data的value可以看成List persion有name属性。 instance可以看成Map(对象的json字符串形式)</p></blockquote><p><img src="'+d+`" alt="image.png"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Person person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;郭洋&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toJSONString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 把对象转化成json字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：{&quot;age&quot;:23,&quot;name&quot;:&quot;郭洋&quot;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这个方法可以将Json字符串转成任意的javabean、Map、集合也可以。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 不指定后面的class就会转成JSONobject，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 若指定转成那个class，前面就要用那个class的实例去接收</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Person person1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str,person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 转成Person类的实例对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Person(name=郭洋, age=23)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    JSONObject jsonObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不指定json字符串要转成那个class对象实例，默认转成JSONObject对象实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jsonObject);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {&quot;name&quot;:&quot;郭洋&quot;,&quot;age&quot;:23}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; map </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String strMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toJSONString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将Map转成json字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(strMap);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {1:1.2,2:1.2,3:1.2,4:1.2}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Map strMap1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(strMap);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将json字符串转化成map对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(strMap1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {&quot;1&quot;:1.2,&quot;2&quot;:1.2,&quot;3&quot;:1.2,&quot;4&quot;:1.2}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//{&quot;age&quot;:23,&quot;name&quot;:&quot;郭洋&quot;}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Person(name=郭洋, age=23)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//{&quot;name&quot;:&quot;郭洋&quot;,&quot;age&quot;:23}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//{1:1.2,2:1.2,3:1.2,4:1.2}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//{&quot;1&quot;:1.2,&quot;2&quot;:1.2,&quot;3&quot;:1.2,&quot;4&quot;:1.2}</span></span></code></pre></div><p>测试二代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myTest2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Person person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;郭洋2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Person person1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    person1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;郭洋1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    person1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; personList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    personList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    personList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toJSONString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(personList);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将List转成Json字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [{&quot;age&quot;:22,&quot;name&quot;:&quot;郭洋2&quot;},{&quot;age&quot;:21,&quot;name&quot;:&quot;郭洋1&quot;}]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*****************************&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str,personList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将json字符串转化成数组对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Object o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//{&quot;name&quot;:&quot;郭洋2&quot;,&quot;age&quot;:22}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                //{&quot;name&quot;:&quot;郭洋1&quot;,&quot;age&quot;:21}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*****************************&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    JSONArray objects </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将json字符串转化成JSONArray对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(objects);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [{&quot;name&quot;:&quot;郭洋2&quot;,&quot;age&quot;:22},{&quot;name&quot;:&quot;郭洋1&quot;,&quot;age&quot;:21}]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*****************************&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; personList1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str,Person.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(personList1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [Person(name=郭洋2, age=22), Person(name=郭洋1, age=21)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*****************************&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[{&quot;age&quot;:22,&quot;name&quot;:&quot;郭洋2&quot;},{&quot;age&quot;:21,&quot;name&quot;:&quot;郭洋1&quot;}]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//*****************************</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//{&quot;name&quot;:&quot;郭洋2&quot;,&quot;age&quot;:22}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//{&quot;name&quot;:&quot;郭洋1&quot;,&quot;age&quot;:21}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//*****************************</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[{&quot;name&quot;:&quot;郭洋2&quot;,&quot;age&quot;:22},{&quot;name&quot;:&quot;郭洋1&quot;,&quot;age&quot;:21}]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//*****************************</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[Person(name=郭洋2, age=22), Person(name=郭洋1, age=21)]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//*****************************</span></span></code></pre></div><p>参考：<a href="https://blog.csdn.net/finalheart/article/details/86073477" target="_blank" rel="noreferrer">https://blog.csdn.net/finalheart/article/details/86073477</a><br> 2021/07/25 16:52 <br><strong>第二章</strong><br><strong>Java中TypeReference用法说明</strong><br><strong>用途、测试</strong><br>在使用fastJson时,对于泛型的<strong>反序列化</strong>很多场景下都会使用到TypeReference，例如：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/13004873/1659930008833-7e52ec3c-3e49-4a6f-8ddd-cc9d2f7417f5.png" alt="image.png"></p><blockquote><p>parseObject()方法同理</p></blockquote><ul><li>getObject(key,xxx.class) <ul><li>传入类对象的时候</li><li>再不破坏数据结构的情况下，传啥，返回的类型就是啥。</li></ul></li><li>getObject(key,new TypeReference&lt; Xxx &gt;() {}) <ul><li>传入TypeReference时，</li><li>传啥返回的类型都是Object，再不破坏数据结构的情况下，传入啥类型就用啥类型去接收返回值就可以。</li></ul></li><li>parseObject(str,xxx)方法同理（将JSON字符串转化成对应的对象，str：json字符串、xxx要转成的对象类型） <ul><li>xxx若为xxx.class时、或new TypeReference&gt;() {}</li><li>传啥返回值的类型就是啥</li></ul></li></ul><p><strong>测试parseObject（）方法</strong><br>若传入的类型有泛型就会编译不通过<br><img src="`+o+`" alt="image.png"></p><ul><li>传new TypeReference&lt; List &gt;() {}</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; personList2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JSONObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TypeReference&lt;List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;(){});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Person person2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> personList2) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Person(name=郭洋2, age=22)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Person(name=郭洋1, age=21)</span></span></code></pre></div><ul><li>传List.class</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List list1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JSONObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str, List.class);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Object o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list1) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//{&quot;name&quot;:&quot;郭洋2&quot;,&quot;age&quot;:22}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//{&quot;name&quot;:&quot;郭洋1&quot;,&quot;age&quot;:21}</span></span></code></pre></div><p><strong>疑惑：</strong><br><strong>1、JSON.parseObject(String str)与JSONObject.parseObject(String str)的区别</strong><br><strong>parseObject(String str)的作用</strong></p><ul><li>JSON.parseObject(String str)是将str转化为相应的JSONObject对象，其中str是“键值对”形式的json字符串，转化为JSONObject对象之后就可以使用其内置的方法，进行各种处理了。</li></ul><p><strong>JSON.parseObject(String str)与JSONObject.parseObject(String str)的区别</strong></p><ul><li>根据<a href="https://www.2cto.com/ym/" target="_blank" rel="noreferrer">源码</a>显示：JSON是一个抽象类，JSON中有一个静态方法parseObject(String text)，将text解析为一个JSONObject对象并返回;JSONObject是一个继承自JSON的类，当调用JSONObject.parseObject(result)时，会直接调用父类的parseObject(String text)。所以两者没什么区别，一个是用父类去调用父类自己的静态的parseObject(String text)，一个是用子类去调用父类的静态parseObject(String text)，两者调的是同一个方法。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JSONObject json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// parms：字符串   把字符串转为JSONObject对象</span></span></code></pre></div><p><img src="`+y+'" alt="image.png"></p>',19);function v(f,x,P,L,T,w){const l=a("groupId"),p=a("artifactId"),h=a("version"),k=a("dependency");return g(),E("div",null,[s("p",null,[u,F,q,A,D,b,i(" import com.alibaba.fastjson import com.alibaba.fastjson.JSON; "),m,C,O,i(),n(k,null,{default:t(()=>[n(l,null,{default:t(()=>[i("com.alibaba")]),_:1}),i(),n(p,null,{default:t(()=>[i("fastjson")]),_:1}),i(),n(h,null,{default:t(()=>[i("1.2.47")]),_:1})]),_:1}),i(),S,j,_,i("这个包里面最主要也是最常用的两个类是 JSON JSONObject 这两个类也都是内部使用的是final map 来实现的。构造的时候可以传入一个ordered。来确定使用LinkedHashMap还是HashMap。看下面这个构造。还可以使用map入参来构造jsonObject。也可以看到jsonobject实际上是json的子类。有一个特征就是 jsonObject是没有static方法的。我们打点出来的静态方法都是JSON那边继承过来的。就不往深挖源码了，知道大概就好。"),B,N]),J])}const I=e(c,[["render",v]]);export{R as __pageData,I as default};
